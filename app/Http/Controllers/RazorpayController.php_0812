<?php

namespace App\Http\Controllers;

use App\Models\Cart;
use App\Models\Coupon;
use App\Models\CouponUsage;
use Illuminate\Support\Str;
use Illuminate\Http\Request;
use Razorpay\Api\Api;
use App\Models\CustomerAddress;
use App\Models\OrderDetail;
use App\Models\Product;
use App\Models\Order;
use App\Models\OrderExtraCharges;
use App\Models\VendorOrderNumber;
use App\Models\ProductVerient;
use App\Models\ProductVerientPrice;
use App\Models\RewardHistory;
use Barryvdh\DomPDF\PDF as DomPDFPDF;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Mail;
use Illuminate\Support\Facades\Session;
use PDF;
use App\Jobs\SendEmailJob;
use App\Traits\CommonTrait;

class RazorpayController extends Controller
{
    use CommonTrait;
    
    public function razorpay()
    {
        return view('razor.index');
    }

    public function payment(Request $request)
    {

        $input = $request->all();
        $api = new Api(env('RAZOR_KEY'), env('RAZOR_SECRET'));
        $payment = $api->payment->fetch($input['razorpay_payment_id']);
        $paymentdetail = array();
        array_walk_recursive($payment, function ($item, $key) use (&$paymentdetail) {
            if (is_object($item)) {
                array_walk_recursive($item, function ($item1, $key1) use (&$paymentdetail) {
                    return $paymentdetail[$key1] = $item1;
                }, $paymentdetail);
            } else {
                return $paymentdetail[$key] = $item;
            }
        }, $paymentdetail);
        $response = false;
        $responsedetail = array();

        if (count($input)  && !empty($input['razorpay_payment_id'])) {
            try {
                $response = $api->payment->fetch($input['razorpay_payment_id'])->capture(array('amount' => $payment['amount']));
                array_walk_recursive($response, function ($item, $key) use (&$responsedetail) {
                    if (is_object($item)) {
                        array_walk_recursive($item, function ($item1, $key1) use (&$responsedetail) {
                            return $responsedetail[$key1] = $item1;
                        }, $responsedetail);
                    } else {
                        return $responsedetail[$key] = $item;
                    }
                }, $responsedetail);
            } catch (\Exception $e) {
                return $e->getMessage();
                $request->session()->put('error', $e->getMessage());
                return redirect()->back();
            }
        }
        $addressid = $request->address;

        $subprice = $gstprice = $totalcartamount = 0;
        $orderdetails = $vendorCartAmountArray = array();
        foreach ($request->session()->get('customer-cart') as $product_id => $cart) {
            foreach ($cart as $variantid => $cartelement) {
                $product = Product::find($product_id);
                array_push($orderdetails, array(
                    'billing_customer_address_id' => $addressid["billing"][$product->vendor_id],
                    'shipping_customer_address_id' => $addressid["shipping"][$product->vendor_id],
                    'vendor_id' => $product->vendor_id,
                    'product_id' => $product_id,
                    'product_variant_price_id' => $variantid,
                    'product_qunatity' => $cartelement['quantity'],
                    'product_price' => $cartelement['price'],
                    'gst_on_product_price' => $cartelement['gst_amount'],
                    'total_product_price' => $cartelement['totalprice']
                ));
                $subprice += ($cartelement['price'] * $cartelement['quantity']);
                $gstprice += ($cartelement['gst_amount'] * $cartelement['quantity']);
                $totalcartamount += $cartelement['totalprice'];
                if (!array_key_exists($product->vendor_id, $vendorCartAmountArray)) {
                    $vendorCartAmountArray[$product->vendor_id] = 0;
                }
                $vendorCartAmountArray[$product->vendor_id] += $cartelement['totalprice'];
                ProductVerientPrice::where('id', $variantid)->update(['quantity' => DB::raw('quantity - ' . $cartelement["quantity"])]);
            }
        }
        
        //get here financial year     
        if ( date('m') > 3 ) {
                $Fyear = date('Y') . (date('y') + 1);
        }
        else {
            $Fyear =(date('Y') - 1). date('y');
        }
        $nextId  = DB::table('orders')->max('id') + 1;
        $invoice_no =  str_pad($nextId , 7, "0", STR_PAD_LEFT). "-" .$Fyear ;
        $orderid = "SBRL-".$invoice_no;
         try {
            
            DB::beginTransaction();
            $order = new Order();
            $order->orderid = $orderid;
            $order->customer_id = $request->session()->get('customer-loggedin-id');
            $order->total_amount = ($payment->amount / 100);
            $order->payment_status = ($response == false ? $payment->status : $response->status);
            $order->payment_source = $payment->method;
            $order->payment_api_response = ($response == false ? json_encode($paymentdetail) : json_encode($responsedetail));
            $order->payment_amount = $subprice;
            $order->gst_on_amount = $gstprice;
            $order->discount = $request->coupon_discount;
            $order->delivery_fee = array_sum($request->delivery_fee);
            $order->save();
            $orderid = $order->id;

            if (!empty($request->coupon_id)) {
                $data = new CouponUsage;
                $data->customer_id = Session::get('customer-loggedin-id');
                $data->order_id = $order->id;
                $data->coupon_id = $request->coupon_id;
                $data->save();
            }

            $vendors = array_unique(array_column($orderdetails, 'vendor_id'));
            $vendorCount = count($vendors);
            foreach ($vendors as $vendor) {
                $orderExtraCharge = new OrderExtraCharges();
                $orderExtraCharge->order_id = $orderid;
                $orderExtraCharge->vendor_id = $vendor;
                $orderExtraCharge->shipping_charges = $request->delivery_fee[$vendor];
                $orderExtraCharge->cod_charges = ($request->cod_charges / $vendorCount);
                if (!empty($request->coupon_id)) {
                    $orderExtraCharge->discount = round((($vendorCartAmountArray[$vendor] * $request->coupon_discount) / $totalcartamount), 2);
                }
                $orderExtraCharge->save();
            }
             $vendorOrder=[];
            foreach ($orderdetails as $orderdetail) {
                $detail = new OrderDetail();
                $vendorOrder[$orderdetail['vendor_id']] =$orderid;
                $detail->order_id = $orderid;
                $detail->vendor_id = $orderdetail['vendor_id'];
                $detail->product_id = $orderdetail['product_id'];
                $detail->product_qunatity = $orderdetail['product_qunatity'];
                $detail->product_price = $orderdetail['product_price'];
                $detail->gst_on_product_price = $orderdetail['gst_on_product_price'];
                $detail->total_product_price = $orderdetail['total_product_price'];
                $detail->product_variant_price_id = $orderdetail['product_variant_price_id'];
                $detail->billing_customer_address_id = $orderdetail['billing_customer_address_id'];
                $detail->shipping_customer_address_id = $orderdetail['shipping_customer_address_id'];
                //$detail->invoice_number =$this->vendorNickNameForder($orderdetail['vendor_id'])."-".$invoice_no;
                $detail->save();
            }
             // vendor order number update 
            $vendororderserial =1;
            foreach($vendorOrder as $vendor_id => $order_id){               

                 // vendor order detais 
                
                $vendor_code = $this->vendorNickNameForder($vendor_id);
                $ordreinovice_id = 1;
                $nextTransactionId = VendorOrderNumber::orderBy('id','desc')->first() ;
                if(!empty($nextTransactionId)){
                    $ordreinovice_id = $nextTransactionId->id +1;
                } 
                $GenerateInvoice =str_pad($nextId , 7, "0", STR_PAD_LEFT). "-" .$vendororderserial. "-" .$Fyear ;
                $vendororderserial++;
                //$GenerateInvoice =  str_pad($ordreinovice_id , 7, "0", STR_PAD_LEFT). "-" .$Fyear  ;
                $VendorOrderInvoice = $vendor_code."-".$GenerateInvoice; 
                $VondorOrderObject =new VendorOrderNumber();
                $VondorOrderObject->order_id = $orderid;
                $VondorOrderObject->save();
                // increament order id
                 $order_update = OrderDetail::where('order_id', $order_id)->where('vendor_id', $vendor_id)->whereRaw('(vendor_order_id = "" OR vendor_order_id IS NULL)')->update(['vendor_order_id' =>$VendorOrderInvoice]); 
            }
              
             DB::commit();
       
        } catch (\Exception $e) {
             
            echo  $e->getMessage(); die;
            DB::rollback();
            
        }   

       // $this->sendMailForOrder($orderid);
        dispatch(new SendEmailJob($orderid,Session::get('customer-loggedin-email')));
        Cart::where('customerid', Session::get('customer-loggedin-id'))->delete();
        $request->session()->put('customer-cart', array());
        $request->session()->put('totalquantity', 0);
        $request->session()->put('success', 'CONGRATULATIONS! YOUR ORDER HAS BEEN PLACED SUCCESSFULLY WITH US. Thank You!');
        $request->session()->put('subsuccess', 'You will receive an email with tracking information once your goods has been shipped.');
        return redirect("/dashboard");
    }

    public function sendMailForOrder($orderid)
    {
        /*Mailing info*/
        $orderDetails = OrderDetail::join('orders', 'order_details.order_id', '=', 'orders.id')
            ->leftjoin('customer_address as cba', 'order_details.billing_customer_address_id', '=', 'cba.id')
            ->leftjoin('customer_address as csa', 'order_details.shipping_customer_address_id', '=', 'csa.id')
            ->leftjoin('products', 'order_details.product_id', '=', 'products.id')
            ->leftjoin('vendors', 'order_details.vendor_id', '=', 'vendors.id')
            ->leftjoin('pincode_master', 'pincode_master.pincode', '=', 'vendors.shipping_pincode')
            ->leftjoin('orders_extra_charges', function ($joins) {
                $joins->on('orders_extra_charges.order_id', '=', 'orders.id');
                $joins->on('orders_extra_charges.vendor_id', '=', 'vendors.id');
            })
            ->leftjoin('product_variant_price', 'product_variant_price.id', '=', 'order_details.product_variant_price_id')
            ->leftjoin('product_variant_values AS pvv1', 'product_variant_price.variant_value_id_1', '=', 'pvv1.id')
            ->leftjoin('product_variants AS pv1', 'pv1.id', '=', 'pvv1.variant_id')
            ->leftjoin('product_variant_values AS pvv2', 'product_variant_price.variant_value_id_2', '=', 'pvv2.id')
            ->leftjoin('product_variants AS pv2', 'pv2.id', '=', 'pvv2.variant_id')
            ->leftjoin('product_variant_values AS pvv3', 'product_variant_price.variant_value_id_3', '=', 'pvv3.id')
            ->leftjoin('product_variants AS pv3', 'pv3.id', '=', 'pvv3.variant_id')
            ->where('orders.id', $orderid)->select('*', 'orders.orderid AS orderID', DB::raw('CONCAT("<strong>", cba.firstname, " ", cba.lastname, "</strong><br />", cba.address_line_1, ", ", IF(cba.address_line_2 IS NOT NULL, CONCAT(cba.address_line_2, ", "), ""), IF(cba.address_line_3 IS NOT NULL, CONCAT(cba.address_line_3, ", "), ""), ",", cba.city,", ", cba.state, ", ", cba.country, ", ", cba.pincode) as billingAddress'), DB::raw('CONCAT("<strong>", csa.firstname, " ", csa.lastname, "</strong><br />", csa.address_line_1, ", ", IF(csa.address_line_2 IS NOT NULL, CONCAT(csa.address_line_2, ", "), ""), IF(csa.address_line_3 IS NOT NULL, CONCAT(csa.address_line_3, ", "), ""), ",", csa.city,", ", csa.state, ", ", csa.country, ", ", csa.pincode) as shippingAddress'), 'products.name AS productName', 'products.slug AS productslug', 'order_details.product_qunatity AS productquantity', 'order_details.gst_on_product_price AS perproductgst', 'order_details.product_price AS productprice', 'orders.discount AS cartDiscount', 'orders.delivery_fee AS cartDeliveryCharge', 'orders.cod_charges AS codOnCart', 'orders.payment_amount AS paymentAmount', 'orders.gst_on_amount AS totalCartGst', 'orders.total_amount AS totalCartAmount', 'pv1.name AS productvariantname1', 'pvv1.value AS variantvalue1', 'pv2.name AS productvariantname2', 'pvv2.value AS variantvalue2', 'pv3.name AS productvariantname3', 'pvv3.value AS variantvalue3', 'orders_extra_charges.shipping_charges AS vendorDeliveryFee', 'orders_extra_charges.cod_charges AS vendorCodCharges', 'orders_extra_charges.discount AS vendorDiscount', 'vendors.store_name AS storeName', 'vendors.address AS storeaddress', 'vendors.gst AS storeGST', 'pincode_master.state AS storeStateCode', 'pincode_master.city AS storeCity', 'order_details.invoice_number AS invoiceNumber', DB::raw("(SELECT image FROM product_images WHERE product_id=products.id LIMIT 1) AS productImage"))->get();

        $vendorWiseDetail = array();
        $orderID = $orderDateTime = $paymentSource = '';
        $codOnCart = $cartDiscount = 0;
        foreach ($orderDetails as $orderDetail) {
            if (!array_key_exists($orderDetail->vendor_id, $vendorWiseDetail)) {
                $vendorWiseDetail[$orderDetail->vendor_id] = array('paymentSource' => $orderDetail->payment_source, 'discount' => $orderDetail->vendorDiscount, 'cod_charges' => $orderDetail->vendorCodCharges, 'shippingFee' => $orderDetail->vendorDeliveryFee, 'invoiceNumber' => $orderDetail->invoiceNumber, 'storeCity' => $orderDetail->storeCity, 'storeStateCode' => $orderDetail->storeStateCode, 'vendor_gst' => $orderDetail->storeGST, 'vendor_alias' => $orderDetail->vendor_alias, 'store_name' => $orderDetail->storeName, 'store_address' => $orderDetail->storeaddress, 'orderID' => $orderDetail->orderID, 'orderDateTime' => $orderDetail->order_datetime,  'customerbillinginfo' => $orderDetail->billingAddress, 'customershippinginfo' => $orderDetail->shippingAddress, 'vendorEmailid' => (!is_null($orderDetail->alternateemail_business_emailid) ? $orderDetail->alternateemail_business_emailid : $orderDetail->business_emailid), 'products' => array());
                $orderID = $orderDetail->orderID;
                $orderDateTime = $orderDetail->order_datetime;
                $cartDiscount = $orderDetail->cartDiscount;
                $codOnCart = $orderDetail->codOnCart;
                $paymentSource = $orderDetail->paymentSource;
            }
            array_push($vendorWiseDetail[$orderDetail->vendor_id]['products'], array('producdescription' => $orderDetail['description'], 'productname' => $orderDetail['productName'], 'productvariantname1' => $orderDetail['productvariantname1'], 'variantvalue1' => $orderDetail['variantvalue1'], 'productvariantname2' => $orderDetail['productvariantname2'], 'variantvalue2' => $orderDetail['variantvalue2'], 'productvariantname3' => $orderDetail['productvariantname3'], 'variantvalue3' => $orderDetail['variantvalue3'], 'productImage' => $orderDetail['productImage'], 'productslug' => $orderDetail['productslug'], 'productprice' => $orderDetail['productprice'], 'productqty' => $orderDetail['productquantity'], 'shippingCharge' => $orderDetail['vendorDeliveryFee'], 'perproductgst' => $orderDetail['perproductgst'], 'sku' => $orderDetail['sku'], 'shippingFee' => $orderDetail['delivery_fee'], 'gst_rate' => $orderDetail['gst_rate'], 'store_name' => $orderDetail['store_name']));
        }

        PDF::loadView('invoices.orderplaced', array('vendorWiseDetail' => $vendorWiseDetail, 'orderDetail' => $orderDetails, 'orderID' => $orderID, 'orderDateTime' => $orderDateTime, 'discountAmount' => $cartDiscount, 'cod_charges' => $codOnCart, 'paymentSource' => $paymentSource))->save(public_path("/invoices/" . $orderDetails[0]->orderID . '.pdf'));
        foreach ($vendorWiseDetail as $vendorDetail) {
            PDF::loadView('invoices.orderplacedvendorwise', array('vendorDetail' => $vendorDetail, 'orderDetail' => $orderDetails))->save(public_path("/backend/invoices/" . (!is_null($vendorDetail['vendor_alias']) ? $vendorDetail['vendor_alias'] : $vendorDetail['store_name']) . $vendorDetail['orderID'] . '.pdf'));
        }

        Mail::send('mailtemplate.orderplaced', array('vendorWiseDetail' => $vendorWiseDetail, 'orderDetail' => $orderDetails, 'orderID' => $orderID, 'orderDateTime' => $orderDateTime, 'discountAmount' => $cartDiscount, 'cod_charges' => $codOnCart, 'paymentSource' => $paymentSource), function ($message) use ($orderDetails) {
            $message->to(Session::get('customer-loggedin-email'))->subject('Order placed successfully.')->attach(public_path("/invoices/" . $orderDetails[0]->orderID . '.pdf'), [
                'as' => 'Invoice' . $orderDetails[0]->orderID,
                'mime' => 'application/pdf'
            ]);

            $message->from('info@spicebucket.com', 'Spice Bucket');
        });
        Mail::send('mailtemplate.orderplaced', array('vendorWiseDetail' => $vendorWiseDetail, 'orderDetail' => $orderDetails, 'discountAmount' => $cartDiscount, 'cod_charges' => $codOnCart), function ($message) use ($orderDetails) {
            $message->to('info@spicebucket.com')->bcc('gyankibatein93@gmail.com')->subject('New order request generated.')->attach(public_path("/invoices/" . $orderDetails[0]->orderID . '.pdf'), [
                'as' => 'Invoice' . $orderDetails[0]->orderID,
                'mime' => 'application/pdf'
            ]);
            $message->from('info@spicebucket.com', 'Spice Bucket');
        });
        foreach ($vendorWiseDetail as $vendorDetail) {
            Mail::send('mailtemplate.orderinprocessvendorwise', array('vendorDetail' => $vendorDetail, 'orderDetail' => $orderDetails), function ($message) use ($vendorDetail) {
                $message->to($vendorDetail['vendorEmailid'])->subject('New order request generated.')->attach(public_path("/backend/invoices/" . (!is_null($vendorDetail['vendor_alias']) ? $vendorDetail['vendor_alias'] : $vendorDetail['store_name']) .  $vendorDetail['orderID'] . '.pdf'), [
                    'as' => 'Invoice' . $vendorDetail['orderID'],
                    'mime' => 'application/pdf'
                ]);
                $message->from('info@spicebucket.com', 'Spice Bucket');
            });
        }
    }

    public function orderIdGenerate(Request $request)
    {
        $api = new Api(env('RAZOR_KEY'), env('RAZOR_SECRET'));
        $order = $api->order->create(array('amount' => $request->input('totalcartamout') * 100, 'currency' => 'INR'));
        return response()->json(['order_id' => $order['id']]);
    }
    public function paymentcodtest(Request $request)
    {
         $this->sendMailForOrderTraitt( 969 ,'niraj4u2@gmail.com');
        die;
    }
    public function paymentcod(Request $request)
    {
        //dd($request->all());
        
        
        $addressid = $request->address;
        $subprice = $gstprice = $totalcartamount = 0;
        $orderdetails = $vendorCartAmountArray = array();
        foreach ($request->session()->get('customer-cart') as $product_id => $cart) {
            foreach ($cart as $variantid => $cartelement) {
                $product = Product::find($product_id);
                array_push($orderdetails, array(
                    'billing_customer_address_id' => $addressid["billing"][$product->vendor_id],
                    'shipping_customer_address_id' => $addressid["shipping"][$product->vendor_id],
                    'vendor_id' => $product->vendor_id,
                    'product_id' => $product_id,
                    'product_variant_price_id' => $variantid,
                    'product_qunatity' => $cartelement['quantity'],
                    'product_price' => $cartelement['price'],
                    'gst_on_product_price' => $cartelement['gst_amount'],
                    'total_product_price' => $cartelement['totalprice']
                ));
                $subprice += ($cartelement['price'] * $cartelement['quantity']);
                $gstprice += ($cartelement['gst_amount'] * $cartelement['quantity']);
                $totalcartamount += $cartelement['totalprice'];
                if (!array_key_exists($product->vendor_id, $vendorCartAmountArray)) {
                    $vendorCartAmountArray[$product->vendor_id] = 0;
                }
                $vendorCartAmountArray[$product->vendor_id] += $cartelement['totalprice'];
                ProductVerientPrice::where('id', $variantid)->update(['quantity' => DB::raw('quantity - ' . $cartelement["quantity"])]);
            }
        }
        
         //get here financial year     
        if ( date('m') > 3 ) {
            $Fyear = date('Y') . (date('y') + 1);
        }
        else {
            $Fyear =(date('Y') - 1). date('y');
        }          

        $nextId  = DB::table('orders')->max('id') + 1;
        $invoice_no =  str_pad($nextId , 7, "0", STR_PAD_LEFT). "-" .$Fyear ;
        $orderid = "SBRL-".$invoice_no;
        $vendors = array_unique(array_column($orderdetails, 'vendor_id'));
        
       
        try {
            
            DB::beginTransaction();
            
            $order = new Order();
            $order->orderid = $orderid;
            $order->customer_id = $request->session()->get('customer-loggedin-id');
            $order->total_amount = $request->totalcartamout;
            $order->payment_status = 'pending';
            $order->payment_source = 'cod';
            $order->payment_api_response = json_encode(array('status' => false, 'message' => 'not applicable for cod deliveries.'));
            $order->payment_amount = $subprice;
            $order->gst_on_amount = $gstprice;
            $order->cod_charges = $request->cod_charges;
            $order->discount = $request->coupon_discount;
            $order->delivery_fee = $request->total_delivery_fee;
            $order->save();
            $orderid = $order->id;

            if (!empty($request->coupon_id)) {
                $data = new CouponUsage;
                $data->customer_id = Session::get('customer-loggedin-id');
                $data->order_id = $order->id;
                $data->coupon_id = $request->coupon_id;
                $data->save();
            }

            $vendors = array_unique(array_column($orderdetails, 'vendor_id'));
            $vendorCount = count($vendors);
            foreach ($vendors as $vendor) {
                $orderExtraCharge = new OrderExtraCharges();
                $orderExtraCharge->order_id = $orderid;
                $orderExtraCharge->vendor_id = $vendor;
                $orderExtraCharge->shipping_charges = $request->delivery_fee[$vendor];
                $orderExtraCharge->cod_charges = ($request->cod_charges / $vendorCount);
                if (!empty($request->coupon_id)) {
                    $orderExtraCharge->discount = round((($vendorCartAmountArray[$vendor] * $request->coupon_discount) / $totalcartamount), 2);
                }
                $orderExtraCharge->save();
            }
             
            $vendorOrder=[];
            foreach ($orderdetails as $orderdetail) {
                $detail = new OrderDetail();
                $vendorOrder[$orderdetail['vendor_id']] =$orderid;
                $detail->order_id = $orderid;
                $detail->vendor_id = $orderdetail['vendor_id'];
                $detail->product_id = $orderdetail['product_id'];
                $detail->product_qunatity = $orderdetail['product_qunatity'];
                $detail->product_price = $orderdetail['product_price'];
                $detail->gst_on_product_price = $orderdetail['gst_on_product_price'];
                $detail->total_product_price = $orderdetail['total_product_price'];
                $detail->product_variant_price_id = $orderdetail['product_variant_price_id'];
                $detail->billing_customer_address_id = $orderdetail['billing_customer_address_id'];
                $detail->shipping_customer_address_id = $orderdetail['shipping_customer_address_id'];
                //$detail->vendor_order_id =$VendorOrderInvoice;
                $detail->save();
            }
            // vendor order number update 
            
            $vendororderserial= 1;
            foreach($vendorOrder as $vendor_id => $order_id){               

                 // vendor order detais 
                
                $vendor_code = $this->vendorNickNamewithStateCode($vendor_id);
                // $ordreinovice_id = 1;
                // $nextTransactionId = VendorOrderNumber::orderBy('id','desc')->first() ;
                // if(!empty($nextTransactionId)){
                //     $ordreinovice_id = $nextTransactionId->id +1;
                // } 
                //$GenerateInvoice =  str_pad($ordreinovice_id , 7, "0", STR_PAD_LEFT). "-" .$Fyear  ;

                $GenerateInvoice =str_pad($nextId , 7, "0", STR_PAD_LEFT). "-" .$vendororderserial. "-" .$Fyear ;
                $vendororderserial++;

                
                $VendorOrderInvoice = $vendor_code."-".$GenerateInvoice; 
                $VondorOrderObject =new VendorOrderNumber();
                $VondorOrderObject->order_id = $orderid;
                $VondorOrderObject->save();
                // increament order id
                 $order_update = OrderDetail::where('order_id', $order_id)->where('vendor_id', $vendor_id)->whereRaw('(vendor_order_id = "" OR vendor_order_id IS NULL)')->update(['vendor_order_id' =>$VendorOrderInvoice]); 
            }
              
             DB::commit();
       
        } catch (\Exception $e) {
            
            echo  $e->getMessage();  
            DB::rollback();die;
            Session::flash('success', $e->getMessage());
            Session::flash('alert-class', 'alert-danger');
           
        }   
        
        // $this->sendMailForOrder($orderid);
         dispatch(new SendEmailJob($orderid,Session::get('customer-loggedin-email')));
        Cart::where('customerid', Session::get('customer-loggedin-id'))->delete();
        $request->session()->put('customer-cart', array());
        $request->session()->put('totalquantity', 0);
        $request->session()->put('success', 'CONGRATULATIONS! YOUR ORDER HAS BEEN PLACED SUCCESSFULLY WITH US. Thank You!');
        $request->session()->put('subsuccess', 'You will receive an email with tracking information once your goods has been shipped.');
       return redirect("/dashboard");
    }

    public function pdfView($orderid)
    {
        $orderDetails = OrderDetail::join('orders', 'order_details.order_id', '=', 'orders.id')
            ->leftjoin('customer_address as cba', 'order_details.billing_customer_address_id', '=', 'cba.id')
            ->leftjoin('customer_address as csa', 'order_details.shipping_customer_address_id', '=', 'csa.id')
            ->leftjoin('products', 'order_details.product_id', '=', 'products.id')
            ->leftjoin('vendors', 'order_details.vendor_id', '=', 'vendors.id')
            ->leftjoin('orders_extra_charges', function ($joins) {
                $joins->on('orders_extra_charges.order_id', '=', 'orders.id');
                $joins->on('orders_extra_charges.vendor_id', '=', 'vendors.id');
            })
            ->leftjoin('product_variant_price', 'product_variant_price.id', '=', 'order_details.product_variant_price_id')
            ->leftjoin('product_variant_values AS pvv1', 'product_variant_price.variant_value_id_1', '=', 'pvv1.id')
            ->leftjoin('product_variants AS pv1', 'pv1.id', '=', 'pvv1.variant_id')
            ->leftjoin('product_variant_values AS pvv2', 'product_variant_price.variant_value_id_2', '=', 'pvv2.id')
            ->leftjoin('product_variants AS pv2', 'pv2.id', '=', 'pvv2.variant_id')
            ->leftjoin('product_variant_values AS pvv3', 'product_variant_price.variant_value_id_3', '=', 'pvv3.id')
            ->leftjoin('product_variants AS pv3', 'pv3.id', '=', 'pvv3.variant_id')
            ->where('orders.id', $orderid)->select('*', 'orders.orderid AS orderID', DB::raw('CONCAT("<tr><td>", cba.firstname, " ", cba.lastname, "</td></tr><tr><td>", cba.emailid, "</td></tr><tr><td>", cba.phonenumber, "</td></tr><tr><td>", cba.address_line_1, ", ", IF(cba.address_line_2 IS NOT NULL, CONCAT(cba.address_line_2, ", "), ""), IF(cba.address_line_3 IS NOT NULL, CONCAT(cba.address_line_3, ", "), ""), "</td></tr><tr><td>", cba.city,", ", cba.state, ", ", cba.country, ", ", cba.pincode, "</td></tr><tr><td>", cba.companyname, "</td></tr>") as billingAddress'), DB::raw('CONCAT("<tr><td>", csa.firstname, " ", csa.lastname, "</td></tr><tr><td>", csa.emailid, "</td></tr><tr><td>", csa.phonenumber, "</td></tr><tr><td>", csa.address_line_1, ", ", IF(csa.address_line_2 IS NOT NULL, CONCAT(csa.address_line_2, ", "), ""), IF(csa.address_line_3 IS NOT NULL, CONCAT(csa.address_line_3, ", "), ""), "</td></tr><tr><td>", csa.city,", ", csa.state, ", ", csa.country, ", ", csa.pincode, "</td></tr><tr><td>", csa.companyname, "</td></tr>") as shippingAddress'), 'products.name AS productName', 'products.slug AS productslug', 'order_details.product_qunatity AS productquantity', 'order_details.gst_on_product_price AS perproductgst', 'order_details.product_price AS productprice', 'orders.discount AS cartDiscount', 'orders.delivery_fee AS cartDeliveryCharge', 'orders.cod_charges AS codOnCart', 'orders.payment_amount AS paymentAmount', 'orders.gst_on_amount AS totalCartGst', 'orders.total_amount AS totalCartAmount', 'pv1.name AS productvariantname1', 'pvv1.value AS variantvalue1', 'pv2.name AS productvariantname2', 'pvv2.value AS variantvalue2', 'pv3.name AS productvariantname3', 'pvv3.value AS variantvalue3', 'orders_extra_charges.shipping_charges AS vendorDeliveryFee', 'vendors.store_name AS storeName', 'vendors.store_name AS storeName', DB::raw("(SELECT image FROM product_images WHERE product_id=products.id LIMIT 1) AS productImage"))->get();

        $vendorWiseDetail = array();
        $orderID = '';
        $orderDateTime = '';
        $codOnCart = $cartDiscount = 0;
        foreach ($orderDetails as $orderDetail) {
            if (!array_key_exists($orderDetail->vendor_id, $vendorWiseDetail)) {
                $vendorWiseDetail[$orderDetail->vendor_id] = array('vendor_alias' => $orderDetail->vendor_alias, 'store_name' => $orderDetail->storeName, 'orderID' => $orderDetail->orderID, 'orderDateTime' => $orderDetail->order_datetime,  'customerbillinginfo' => $orderDetail->billingAddress, 'customershippinginfo' => $orderDetail->shippingAddress, 'vendorEmailid' => (!is_null($orderDetail->alternateemail_business_emailid) ? $orderDetail->alternateemail_business_emailid : $orderDetail->business_emailid), 'products' => array());
                $orderID = $orderDetail->orderID;
                $orderDateTime = $orderDetail->order_datetime;
                $cartDiscount = $orderDetail->cartDiscount;
                $codOnCart = $orderDetail->codOnCart;
            }
            array_push($vendorWiseDetail[$orderDetail->vendor_id]['products'], array('producdescription' => $orderDetail['description'], 'productname' => $orderDetail['productName'], 'productvariantname1' => $orderDetail['productvariantname1'], 'variantvalue1' => $orderDetail['variantvalue1'], 'productvariantname2' => $orderDetail['productvariantname2'], 'variantvalue2' => $orderDetail['variantvalue2'], 'productvariantname3' => $orderDetail['productvariantname3'], 'variantvalue3' => $orderDetail['variantvalue3'], 'productImage' => $orderDetail['productImage'], 'productslug' => $orderDetail['productslug'], 'productprice' => $orderDetail['productprice'], 'productqty' => $orderDetail['productquantity'], 'shippingCharge' => $orderDetail['vendorDeliveryFee'], 'perproductgst' => $orderDetail['perproductgst'], 'sku' => $orderDetail['sku'], 'shippingFee' => $orderDetail['delivery_fee'], 'gst_rate' => $orderDetail['gst_rate']));
        }

        return view('invoices.orderplaced', array('vendorWiseDetail' => $vendorWiseDetail, 'orderDetail' => $orderDetails, 'orderID' => $orderID, 'orderDateTime' => $orderDateTime, 'discountAmount' => $cartDiscount, 'cod_charges' => $codOnCart));
    }


 public function sendMailForOrderTraitt($orderid='',$customerEmail='')
    {
        /*Mailing info*/
        $orderDetails = OrderDetail::join('orders', 'order_details.order_id', '=', 'orders.id')
            ->leftjoin('customer_address as cba', 'order_details.billing_customer_address_id', '=', 'cba.id')
            ->leftjoin('customer_address as csa', 'order_details.shipping_customer_address_id', '=', 'csa.id')
            ->leftjoin('products', 'order_details.product_id', '=', 'products.id')
            ->leftjoin('vendors', 'order_details.vendor_id', '=', 'vendors.id')
            ->leftjoin('pincode_master', 'pincode_master.pincode', '=', 'vendors.shipping_pincode')
            ->leftjoin('orders_extra_charges', function ($joins) {
                $joins->on('orders_extra_charges.order_id', '=', 'orders.id');
                $joins->on('orders_extra_charges.vendor_id', '=', 'vendors.id');
            })
            ->leftjoin('product_variant_price', 'product_variant_price.id', '=', 'order_details.product_variant_price_id')
            ->leftjoin('product_variant_values AS pvv1', 'product_variant_price.variant_value_id_1', '=', 'pvv1.id')
            ->leftjoin('product_variants AS pv1', 'pv1.id', '=', 'pvv1.variant_id')
            ->leftjoin('product_variant_values AS pvv2', 'product_variant_price.variant_value_id_2', '=', 'pvv2.id')
            ->leftjoin('product_variants AS pv2', 'pv2.id', '=', 'pvv2.variant_id')
            ->leftjoin('product_variant_values AS pvv3', 'product_variant_price.variant_value_id_3', '=', 'pvv3.id')
            ->leftjoin('product_variants AS pv3', 'pv3.id', '=', 'pvv3.variant_id')
            ->where('orders.id', $orderid)->select('*', 'orders.orderid AS orderID', DB::raw('CONCAT("<strong>", cba.firstname, " ", cba.lastname, "</strong><br />", cba.address_line_1, ", ", IF(cba.address_line_2 IS NOT NULL, CONCAT(cba.address_line_2, ", "), ""), IF(cba.address_line_3 IS NOT NULL, CONCAT(cba.address_line_3, ", "), ""), ",", cba.city,", ", cba.state, ", ", cba.country, ", ", cba.pincode) as billingAddress'), DB::raw('CONCAT("<strong>", csa.firstname, " ", csa.lastname, "</strong><br />", csa.address_line_1, ", ", IF(csa.address_line_2 IS NOT NULL, CONCAT(csa.address_line_2, ", "), ""), IF(csa.address_line_3 IS NOT NULL, CONCAT(csa.address_line_3, ", "), ""), ",", csa.city,", ", csa.state, ", ", csa.country, ", ", csa.pincode) as shippingAddress'), 'products.name AS productName', 'products.slug AS productslug', 'order_details.product_qunatity AS productquantity', 'order_details.gst_on_product_price AS perproductgst', 'order_details.product_price AS productprice', 'orders.discount AS cartDiscount', 'orders.delivery_fee AS cartDeliveryCharge', 'orders.cod_charges AS codOnCart', 'orders.payment_amount AS paymentAmount', 'orders.gst_on_amount AS totalCartGst', 'orders.total_amount AS totalCartAmount', 'pv1.name AS productvariantname1', 'pvv1.value AS variantvalue1', 'pv2.name AS productvariantname2', 'pvv2.value AS variantvalue2', 'pv3.name AS productvariantname3', 'pvv3.value AS variantvalue3', 'orders_extra_charges.shipping_charges AS vendorDeliveryFee', 'orders_extra_charges.cod_charges AS vendorCodCharges', 'orders_extra_charges.discount AS vendorDiscount', 'vendors.store_name AS storeName', 'vendors.address AS storeaddress', 'vendors.gst AS storeGST', 'pincode_master.statecode AS storeStateCode', 'pincode_master.gstcode', 'pincode_master.city AS storeCity', 'order_details.vendor_order_id AS invoiceNumber', DB::raw("(SELECT image FROM product_images WHERE product_id=products.id LIMIT 1) AS productImage"))->get();

                



        $vendorWiseDetail = array();
        $orderID = $orderDateTime = $paymentSource = '';
        $codOnCart = $cartDiscount = 0;
        foreach ($orderDetails as $orderDetail) {
            if (!array_key_exists($orderDetail->vendor_id, $vendorWiseDetail)) {
                $vendorWiseDetail[$orderDetail->vendor_id] = array('paymentSource' => $orderDetail->payment_source, 'discount' => $orderDetail->vendorDiscount, 'cod_charges' => $orderDetail->vendorCodCharges, 'shippingFee' => $orderDetail->vendorDeliveryFee, 'invoiceNumber' => $orderDetail->invoiceNumber, 'storeCity' => $orderDetail->storeCity, 'storeStateCode' => $orderDetail->storeStateCode, 'vendor_gst' => $orderDetail->storeGST, 'gstcode'=>$orderDetail['gstcode'],'vendor_alias' => $orderDetail->vendor_alias, 'store_name' => $orderDetail->storeName, 'store_address' => $orderDetail->storeaddress, 'orderID' => $orderDetail->orderID, 'orderDateTime' => $orderDetail->order_datetime,  'vendorDiscount' => $orderDetail->vendorDiscount, 'customerbillinginfo' => $orderDetail->billingAddress, 'customershippinginfo' => $orderDetail->shippingAddress, 'vendorEmailid' => (!is_null($orderDetail->alternateemail_business_emailid) ? $orderDetail->alternateemail_business_emailid : $orderDetail->business_emailid), 'products' => array());
                $orderID = $orderDetail->orderID;
                $orderDateTime = $orderDetail->order_datetime;
                $cartDiscount = $orderDetail->cartDiscount;
                $codOnCart = $orderDetail->codOnCart;
                $paymentSource = $orderDetail->paymentSource;
            }


            array_push($vendorWiseDetail[$orderDetail->vendor_id]['products'], array('producdescription' => $orderDetail['description'], 'productname' => $orderDetail['productName'], 'productvariantname1' => $orderDetail['productvariantname1'], 'variantvalue1' => $orderDetail['variantvalue1'], 'productvariantname2' => $orderDetail['productvariantname2'], 'variantvalue2' => $orderDetail['variantvalue2'], 'productvariantname3' => $orderDetail['productvariantname3'], 'variantvalue3' => $orderDetail['variantvalue3'], 'productImage' => $orderDetail['productImage'], 'productslug' => $orderDetail['productslug'], 'productprice' => $orderDetail['productprice'], 'productqty' => $orderDetail['productquantity'], 'shippingCharge' => $orderDetail['vendorDeliveryFee'], 'perproductgst' => $orderDetail['perproductgst'], 'sku' => $orderDetail['sku'], 'shippingFee' => $orderDetail['delivery_fee'], 'gst_rate' => $orderDetail['gst_rate'], 'store_name' => $orderDetail['store_name']));
        }
        echo $cartDiscount;
         //vendorDiscount
        
        foreach ($vendorWiseDetail as $vendor_id=>$vendorDetail) {
        echo View('invoices.VenorWiseOrder', array('vendorWiseDetail' =>array($vendor_id=>$vendorDetail),  'vendorDetail' => $vendorDetail, 'orderID' => $vendorDetail['invoiceNumber'], 'orderDateTime' => $orderDateTime, 'discountAmount' =>$vendorDetail['vendorDiscount'], 'cod_charges' => $codOnCart, 'paymentSource' => $paymentSource));
        }
        die;  
         


        foreach ($vendorWiseDetail as $vendor_id=>$vendorDetail) {
            //PDF::loadView('invoices.orderplacedvendorwise', array('vendorDetail' => $vendorDetail, 'orderDetail' => $orderDetails))->save(public_path("/backend/invoices/" .  $vendorDetail['invoiceNumber'] . '.pdf'));

             PDF::loadView('invoices.VenorWiseOrder', array('vendorWiseDetail' =>array($vendor_id=>$vendorDetail),  'vendorDetail' => $vendorDetail, 'orderID' => $vendorDetail['invoiceNumber'], 'orderDateTime' => $orderDateTime, 'discountAmount' => $cartDiscount, 'cod_charges' => $codOnCart, 'paymentSource' => $paymentSource))->save(public_path("/backend/invoices/" .  $vendorDetail['invoiceNumber'] . '.pdf'));
        }




        Mail::send('mailtemplate.orderplaced', array('vendorWiseDetail' => $vendorWiseDetail, 'orderDetail' => $orderDetails, 'orderID' => $orderID, 'orderDateTime' => $orderDateTime, 'discountAmount' => $cartDiscount, 'cod_charges' => $codOnCart, 'paymentSource' => $paymentSource), function ($message) use ($orderDetails,$customerEmail) {
            $message->to($customerEmail)->subject('Order placed successfully.')->attach(public_path("/invoices/" . $orderDetails[0]->orderID . '.pdf'), [
                'as' => 'Invoice #' . $orderDetails[0]->orderID.'.pdf',
                'mime' => 'application/pdf'
            ]);

            $message->from('noreply@spicebucket.com', 'Spice Bucket');
        });
        Mail::send('mailtemplate.orderplaced', array('vendorWiseDetail' => $vendorWiseDetail, 'orderDetail' => $orderDetails, 'discountAmount' => $cartDiscount, 'cod_charges' => $codOnCart), function ($message) use ($orderDetails) {
            $message->to('info@spicebucket.com')->bcc('itsnoormail@gmail.com')->subject('New order request generated.')->attach(public_path("/invoices/" . $orderDetails[0]->orderID . '.pdf'), [
                'as' => 'Invoice #' . $orderDetails[0]->orderID.'.pdf',
                'mime' => 'application/pdf'
            ]);
            $message->from('noreply@spicebucket.com', 'Spice Bucket');
        });
        foreach ($vendorWiseDetail as $vendorDetail) {
            Mail::send('mailtemplate.orderinprocessvendorwise1', array('vendorDetail' => $vendorDetail, 'orderDetail' => $orderDetails), function ($message) use ($vendorDetail) {
                $message->to($vendorDetail['vendorEmailid'])->bcc('niraj4u2@gmail.com')->subject('New order request generated.')->attach(public_path("/backend/invoices/" .$vendorDetail['invoiceNumber'] . '.pdf' ), [
                    'as' => 'Invoice #' . $vendorDetail['invoiceNumber'].'.pdf',
                    'mime' => 'application/pdf'
                ]);
                $message->from('noreply@spicebucket.com', 'Spice Bucket');
            });
        }
        return true;
    }
}
